mats_bin <- mats_q
mats_bin_ <- mats_bin[,-1] # just data columns
mats_bin_ <- droplevels(mats_bin_)
mats_bin_ <- colClasses(colClasses(mats_bin_, rep("character", ncol(mats_bin_))),
rep("numeric", ncol(mats_bin_)))
mats_bin_[mats_bin_ > 0] <- 1 # make all values > 0 into 1's - AKA: make binary matrix
mats_bin_ <- data.frame(X = mats_bin[,1], mats_bin_) # add row names back to binary matrix
names(mats_q)[1] <- "X" # rename first column
names(mats_q)[-1] <- str_replace_all( # fix column names
str_replace_all(names(mats_q)[-1], "\\.+|\\s+", "_"), "_$", "")
mats_q[,1] <-  str_replace_all( # fix row names
str_replace_all(str_replace_all(mats_q[,1], "\\.+|\\s+", "_"), "__", "_"), "_$", "")
names(mats_bin_)[-1] <- str_replace_all( # fix column names
str_replace_all(names(mats_bin_)[-1], "\\.+|\\s+", "_"), "_$", "")
mats_bin_[,1] <-  str_replace_all( # fix row names
str_replace_all(str_replace_all(mats_bin_[,1], "\\.+|\\s+", "_"), "__", "_"), "_$", "")
writedir <- "/Users/ScottMac/Dropbox/CANPOLIN_treeshape_ms/data/empirical/rezendeetal2007nature/networks/matrices/new/quantitative/"
write.csv(mats_bin_, paste(writedir, x, "_binary.csv", sep=""), row.names=F)
write.csv(mats_q, paste(writedir, x, "_quant.csv", sep=""), row.names=F)
} else
{
names(mats)[1] <- "X" # rename first column
names(mats)[-1] <- str_replace_all( # fix column names
str_replace_all(names(mats)[-1], "\\.|\\.\\s|\\s+", "_"), "_$", "")
mats[,1] <- str_replace_all( # fix row names
str_replace_all(str_replace_all(mats[,1], "\\.|\\.\\s|\\s+", "_"), "__", "_"), "_$", "")
mats[,1] <-  str_replace_all(mats[,1], "\\(|\\)|\\,", "_")
nn <- apply(mats, 2, function(x) nchar(as.character(x))) # remove NA rows part 1
mats <- mats[!rowSums(nn) == 0,] # remove NA rows part 2
mats <- mats[-nrow(mats),] # remove degree row
# give names to species that don't have names in the rows
mats[,1][nchar(as.character(mats[,1]))==0] <- paste0("noname", 1:length(mats[,1][nchar(as.character(mats[,1]))==0]))
writedir <- "/Users/ScottMac/Dropbox/CANPOLIN_treeshape_ms/data/empirical/rezendeetal2007nature/networks/matrices/new/binary/"
write.csv(mats, paste(writedir, x, "_binary.csv", sep=""), row.names=F)
}
}
sheets
setwd("/Users/ScottMac/Dropbox/CANPOLIN_treeshape_ms/data/empirical/rezendeetal2007nature/networks")
l_ply(sheets, foo, .progress="text")
#' Checking for consistency
#'
#' @param tocheck csv file to check
#' @param what which column to check
#' @examples \dontrun{
#' checkconst(tocheck="SpecimenInfo.csv", coltoget=3, what="site")
#'
#' # All
#' checkconst(tocheck="Bees_Biota_cleaned.csv")
#' checkconst(tocheck="Bees_Biota_cleaned.csv", what="poll")
#' }
checkconst <- function(tocheck, coltoget = NULL, what = "all") {
d_ <- paste0("~/Dropbox/data_for_database/database_tables/done/", tocheck)
ddd <- "~/Dropbox/data_for_database/database_tables/done/"
# 	d_ <- paste0("~/Dropbox/data_for_database/modifieddata_in_here/", tocheck)
what_ <- match.arg(what,
choices=c("pollinators","investigators","sites","plants","all","subgenus",
"genus","family","order","class","phylum","kingdom","municipality",
"stateprovince","county"))
if(what_=="pollinators"){
xx <- unique(read.csv(d_)[,1])
invest <- unique(as.character(read.csv(paste0(ddd, "PollinatorTraitsP.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="investigators"){
xx <- unique(read.csv(d_)[,coltoget])
invest <- unique(as.character(read.csv(paste0(ddd, "Investigators.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="sites"){
xx <- unique(read.csv(d_)[,coltoget])
invest <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="plants"){
xx <- unique(read.csv(d_)[,4])
invest <- unique(as.character(read.csv(paste0(ddd, "PlantTraitsP.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="subgenus"){
xx <- unique(read.csv(d_)[,coltoget])
subg <- unique(as.character(read.csv(paste0(ddd, "SubGenus.csv"))[,1]))
sort(as.character(xx[!xx %in% subg]))
} else
if(what_=="genus"){
xx <- unique(read.csv(d_)[,coltoget])
genus <- unique(as.character(read.csv(paste0(ddd, "Genus.csv"))[,1]))
sort(as.character(xx[!xx %in% genus]))
} else
if(what_=="family"){
xx <- unique(read.csv(d_)[,coltoget])
fam <- unique(as.character(read.csv(paste0(ddd, "Family.csv"))[,1]))
sort(as.character(xx[!xx %in% fam]))
} else
if(what_=="order"){
xx <- unique(read.csv(d_)[,coltoget])
ord <- unique(as.character(read.csv(paste0(ddd, "Order.csv"))[,1]))
sort(as.character(xx[!xx %in% ord]))
} else
if(what_=="class"){
xx <- unique(read.csv(d_)[,coltoget])
cl <- unique(as.character(read.csv(paste0(ddd, "Class.csv"))[,1]))
sort(as.character(xx[!xx %in% cl]))
} else
if(what_=="phylum"){
xx <- unique(read.csv(d_)[,coltoget])
phy <- unique(as.character(read.csv(paste0(ddd, "Phylum.csv"))[,1]))
sort(as.character(xx[!xx %in% phy]))
} else
if(what_=="kingdom"){
xx <- unique(read.csv(d_)[,coltoget])
king <- unique(as.character(read.csv(paste0(ddd, "Kingdom.csv"))[,1]))
sort(as.character(xx[!xx %in% king]))
} else
if(what_=="municipality"){
xx <- unique(read.csv(d_)[,coltoget])
muni <- unique(as.character(read.csv(paste0(ddd, "Municipality.csv"))[,1]))
sort(as.character(xx[!xx %in% muni]))
} else
if(what_=="stateprovince"){
xx <- unique(read.csv(d_)[,coltoget])
muni <- unique(as.character(read.csv(paste0(ddd, "StateProvince.csv"))[,1]))
sort(as.character(xx[!xx %in% muni]))
} else
if(what_=="county"){
xx <- unique(read.csv(d_)[,coltoget])
muni <- unique(as.character(read.csv(paste0(ddd, "County.csv"))[,1]))
sort(as.character(xx[!xx %in% muni]))
} else
if(what_=="all"){
poll_ <- unique(read.csv(d_)[,1])
poll <- unique(as.character(read.csv(paste0(ddd, "PollinatorTraitsP.csv"))[,1]))
one <- sort(as.character(poll_[!poll_ %in% poll]))
invest_ <- unique(read.csv(d_)[,2])
invest <- unique(as.character(read.csv(paste0(ddd, "Investigators.csv"))[,1]))
two <- sort(as.character(invest_[!invest_ %in% invest]))
site_ <- unique(read.csv(d_)[,3])
site <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"))[,1]))
three <- sort(as.character(site_[!site_ %in% site]))
plant_ <- unique(read.csv(d_)[,4])
plant <- unique(as.character(read.csv(paste0(ddd, "PlantTraitsP.csv"))[,1]))
four <- sort(as.character(plant_[!plant_ %in% plant]))
out <- list(one, two, three, four)
names(out) <- c("polls","investigators","sites","plants")
out
}
}
# library(stringr)
# dat <- as.character(read.csv("~/thethe.csv")[,1])
# doit <- function(x) {
# 	temp <- str_split(x, "\\.")[[1]]
# 	if(nchar(temp[[1]]) > 2){ day <- str_split(temp[[1]], "-")[[1]] } else { day <- temp[[1]] }
# 	paste(day, temp[[2]], temp[[3]], sep="-")
# }
#
# sapply(dat, doit)
checkconst(tocheck="SpecimenInfo.csv", coltoget=3, what="site")
#' Checking for consistency
#'
#' @param tocheck csv file to check
#' @param what which column to check
#' @examples \dontrun{
#' checkconst(tocheck="SpecimenInfo.csv", coltoget=3, what="sites")
#'
#' # All
#' checkconst(tocheck="Bees_Biota_cleaned.csv")
#' checkconst(tocheck="Bees_Biota_cleaned.csv", what="poll")
#' }
checkconst <- function(tocheck, coltoget = NULL, what = "all") {
d_ <- paste0("~/Dropbox/data_for_database/database_tables/done/", tocheck)
ddd <- "~/Dropbox/data_for_database/database_tables/done/"
# 	d_ <- paste0("~/Dropbox/data_for_database/modifieddata_in_here/", tocheck)
what_ <- match.arg(what,
choices=c("pollinators","investigators","sites","plants","all","subgenus",
"genus","family","order","class","phylum","kingdom","municipality",
"stateprovince","county"))
if(what_=="pollinators"){
xx <- unique(read.csv(d_)[,1])
invest <- unique(as.character(read.csv(paste0(ddd, "PollinatorTraitsP.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="investigators"){
xx <- unique(read.csv(d_)[,coltoget])
invest <- unique(as.character(read.csv(paste0(ddd, "Investigators.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="sites"){
xx <- unique(read.csv(d_)[,coltoget])
invest <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="plants"){
xx <- unique(read.csv(d_)[,4])
invest <- unique(as.character(read.csv(paste0(ddd, "PlantTraitsP.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="subgenus"){
xx <- unique(read.csv(d_)[,coltoget])
subg <- unique(as.character(read.csv(paste0(ddd, "SubGenus.csv"))[,1]))
sort(as.character(xx[!xx %in% subg]))
} else
if(what_=="genus"){
xx <- unique(read.csv(d_)[,coltoget])
genus <- unique(as.character(read.csv(paste0(ddd, "Genus.csv"))[,1]))
sort(as.character(xx[!xx %in% genus]))
} else
if(what_=="family"){
xx <- unique(read.csv(d_)[,coltoget])
fam <- unique(as.character(read.csv(paste0(ddd, "Family.csv"))[,1]))
sort(as.character(xx[!xx %in% fam]))
} else
if(what_=="order"){
xx <- unique(read.csv(d_)[,coltoget])
ord <- unique(as.character(read.csv(paste0(ddd, "Order.csv"))[,1]))
sort(as.character(xx[!xx %in% ord]))
} else
if(what_=="class"){
xx <- unique(read.csv(d_)[,coltoget])
cl <- unique(as.character(read.csv(paste0(ddd, "Class.csv"))[,1]))
sort(as.character(xx[!xx %in% cl]))
} else
if(what_=="phylum"){
xx <- unique(read.csv(d_)[,coltoget])
phy <- unique(as.character(read.csv(paste0(ddd, "Phylum.csv"))[,1]))
sort(as.character(xx[!xx %in% phy]))
} else
if(what_=="kingdom"){
xx <- unique(read.csv(d_)[,coltoget])
king <- unique(as.character(read.csv(paste0(ddd, "Kingdom.csv"))[,1]))
sort(as.character(xx[!xx %in% king]))
} else
if(what_=="municipality"){
xx <- unique(read.csv(d_)[,coltoget])
muni <- unique(as.character(read.csv(paste0(ddd, "Municipality.csv"))[,1]))
sort(as.character(xx[!xx %in% muni]))
} else
if(what_=="stateprovince"){
xx <- unique(read.csv(d_)[,coltoget])
muni <- unique(as.character(read.csv(paste0(ddd, "StateProvince.csv"))[,1]))
sort(as.character(xx[!xx %in% muni]))
} else
if(what_=="county"){
xx <- unique(read.csv(d_)[,coltoget])
muni <- unique(as.character(read.csv(paste0(ddd, "County.csv"))[,1]))
sort(as.character(xx[!xx %in% muni]))
} else
if(what_=="all"){
poll_ <- unique(read.csv(d_)[,1])
poll <- unique(as.character(read.csv(paste0(ddd, "PollinatorTraitsP.csv"))[,1]))
one <- sort(as.character(poll_[!poll_ %in% poll]))
invest_ <- unique(read.csv(d_)[,2])
invest <- unique(as.character(read.csv(paste0(ddd, "Investigators.csv"))[,1]))
two <- sort(as.character(invest_[!invest_ %in% invest]))
site_ <- unique(read.csv(d_)[,3])
site <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"))[,1]))
three <- sort(as.character(site_[!site_ %in% site]))
plant_ <- unique(read.csv(d_)[,4])
plant <- unique(as.character(read.csv(paste0(ddd, "PlantTraitsP.csv"))[,1]))
four <- sort(as.character(plant_[!plant_ %in% plant]))
out <- list(one, two, three, four)
names(out) <- c("polls","investigators","sites","plants")
out
}
}
# library(stringr)
# dat <- as.character(read.csv("~/thethe.csv")[,1])
# doit <- function(x) {
# 	temp <- str_split(x, "\\.")[[1]]
# 	if(nchar(temp[[1]]) > 2){ day <- str_split(temp[[1]], "-")[[1]] } else { day <- temp[[1]] }
# 	paste(day, temp[[2]], temp[[3]], sep="-")
# }
#
# sapply(dat, doit)
checkconst(tocheck="SpecimenInfo.csv", coltoget=3, what="sites")
checkconst(tocheck="SpecimenInfo.csv", coltoget=3, what="sites")
tocheck="SpecimenInfo.csv"
what="sites"
coltoget=3
d_ <- paste0("~/Dropbox/data_for_database/database_tables/done/", tocheck)
ddd <- "~/Dropbox/data_for_database/database_tables/done/"
what_ <- match.arg(what,
choices=c("pollinators","investigators","sites","plants","all","subgenus",
"genus","family","order","class","phylum","kingdom","municipality",
"stateprovince","county"))
what_
unique(read.csv(d_)[,coltoget])
xx <- as.character(unique(read.csv(d_)[,coltoget]))
xx
invest <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"))[,1]))
paste0(ddd, "SiteInfo.csv")
invest <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"))[1:10,1]))
invest <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"))[1:3,1]))
invest <- unique(as.character(read.csv(encoding='UTF-8', paste0(ddd, "PlantTraitsP.csv"))[,1]))
invest
xx <- unique(read.csv(d_)[,4])
sort(as.character(xx[!xx %in% invest]))
xx <- unique(read.csv(encoding='UTF-8', d_)[,4])
xx
invest <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"), encoding='UTF-8')[,1]))
invest <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"), encoding='Latin1')[,1]))
invest <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"), encoding='Latin 1')[,1]))
invest <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"), encoding='unknown-8bit')[,1]))
invest <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"), encoding='8bit')[,1]))
paste0(ddd, "SiteInfo.csv")
invest <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"), asis=T, encoding='8bit')[,1]))
invest <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"), as.is=T, encoding='8bit')[,1]))
invest <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"), as.is="character", encoding='8bit')[,1]))
invest <- read.csv("~/Dropbox/data_for_database/database_tables/done/SiteInfo.csv")
#' Checking for consistency
#'
#' @param tocheck csv file to check
#' @param what which column to check
#' @examples \dontrun{
#' checkconst(tocheck="SpecimenInfo.csv", coltoget=3, what="sites")
#'
#' # All
#' checkconst(tocheck="Bees_Biota_cleaned.csv")
#' checkconst(tocheck="Bees_Biota_cleaned.csv", what="poll")
#' }
checkconst <- function(tocheck, coltoget = NULL, what = "all") {
d_ <- paste0("~/Dropbox/data_for_database/database_tables/done/", tocheck)
ddd <- "~/Dropbox/data_for_database/database_tables/done/"
# 	d_ <- paste0("~/Dropbox/data_for_database/modifieddata_in_here/", tocheck)
what_ <- match.arg(what,
choices=c("pollinators","investigators","sites","plants","all","subgenus",
"genus","family","order","class","phylum","kingdom","municipality",
"stateprovince","county"))
if(what_=="pollinators"){
xx <- unique(read.csv(d_)[,1])
invest <- unique(as.character(read.csv(paste0(ddd, "PollinatorTraitsP.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="investigators"){
xx <- unique(read.csv(d_)[,coltoget])
invest <- unique(as.character(read.csv(paste0(ddd, "Investigators.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="sites"){
xx <- as.character(unique(read.csv(d_, encoding='UTF-8')[,coltoget]))
invest <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"), encoding='8bit')[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="plants"){
xx <- unique(read.csv(d_)[,4])
invest <- unique(as.character(read.csv(paste0(ddd, "PlantTraitsP.csv"))[,1]))
sort(as.character(xx[!xx %in% invest]))
} else
if(what_=="subgenus"){
xx <- unique(read.csv(d_)[,coltoget])
subg <- unique(as.character(read.csv(paste0(ddd, "SubGenus.csv"))[,1]))
sort(as.character(xx[!xx %in% subg]))
} else
if(what_=="genus"){
xx <- unique(read.csv(d_)[,coltoget])
genus <- unique(as.character(read.csv(paste0(ddd, "Genus.csv"))[,1]))
sort(as.character(xx[!xx %in% genus]))
} else
if(what_=="family"){
xx <- unique(read.csv(d_)[,coltoget])
fam <- unique(as.character(read.csv(paste0(ddd, "Family.csv"))[,1]))
sort(as.character(xx[!xx %in% fam]))
} else
if(what_=="order"){
xx <- unique(read.csv(d_)[,coltoget])
ord <- unique(as.character(read.csv(paste0(ddd, "Order.csv"))[,1]))
sort(as.character(xx[!xx %in% ord]))
} else
if(what_=="class"){
xx <- unique(read.csv(d_)[,coltoget])
cl <- unique(as.character(read.csv(paste0(ddd, "Class.csv"))[,1]))
sort(as.character(xx[!xx %in% cl]))
} else
if(what_=="phylum"){
xx <- unique(read.csv(d_)[,coltoget])
phy <- unique(as.character(read.csv(paste0(ddd, "Phylum.csv"))[,1]))
sort(as.character(xx[!xx %in% phy]))
} else
if(what_=="kingdom"){
xx <- unique(read.csv(d_)[,coltoget])
king <- unique(as.character(read.csv(paste0(ddd, "Kingdom.csv"))[,1]))
sort(as.character(xx[!xx %in% king]))
} else
if(what_=="municipality"){
xx <- unique(read.csv(d_)[,coltoget])
muni <- unique(as.character(read.csv(paste0(ddd, "Municipality.csv"))[,1]))
sort(as.character(xx[!xx %in% muni]))
} else
if(what_=="stateprovince"){
xx <- unique(read.csv(d_)[,coltoget])
muni <- unique(as.character(read.csv(paste0(ddd, "StateProvince.csv"))[,1]))
sort(as.character(xx[!xx %in% muni]))
} else
if(what_=="county"){
xx <- unique(read.csv(d_)[,coltoget])
muni <- unique(as.character(read.csv(paste0(ddd, "County.csv"))[,1]))
sort(as.character(xx[!xx %in% muni]))
} else
if(what_=="all"){
poll_ <- unique(read.csv(d_)[,1])
poll <- unique(as.character(read.csv(paste0(ddd, "PollinatorTraitsP.csv"))[,1]))
one <- sort(as.character(poll_[!poll_ %in% poll]))
invest_ <- unique(read.csv(d_)[,2])
invest <- unique(as.character(read.csv(paste0(ddd, "Investigators.csv"))[,1]))
two <- sort(as.character(invest_[!invest_ %in% invest]))
site_ <- unique(read.csv(d_)[,3])
site <- unique(as.character(read.csv(paste0(ddd, "SiteInfo.csv"))[,1]))
three <- sort(as.character(site_[!site_ %in% site]))
plant_ <- unique(read.csv(d_)[,4])
plant <- unique(as.character(read.csv(paste0(ddd, "PlantTraitsP.csv"))[,1]))
four <- sort(as.character(plant_[!plant_ %in% plant]))
out <- list(one, two, three, four)
names(out) <- c("polls","investigators","sites","plants")
out
}
}
# library(stringr)
# dat <- as.character(read.csv("~/thethe.csv")[,1])
# doit <- function(x) {
# 	temp <- str_split(x, "\\.")[[1]]
# 	if(nchar(temp[[1]]) > 2){ day <- str_split(temp[[1]], "-")[[1]] } else { day <- temp[[1]] }
# 	paste(day, temp[[2]], temp[[3]], sep="-")
# }
#
# sapply(dat, doit)
checkconst(tocheck="SpecimenInfo.csv", coltoget=3, what="sites")
checkconst(tocheck="SpecimenInfo.csv", coltoget=3, what="sites")
checkconst(tocheck="SpecimenInfo.csv", coltoget=3, what="sites")
checkconst(tocheck="SpecimenInfo.csv", coltoget=3, what="sites")
knitpost("/Users/ScottMac/github/SChamberlain/schamberlain.github.com/_drafts/2012-12-06-taxize.Rmd")
install.packages("taxize", type="source")
library("adephylo", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
detach("package:adephylo", unload=TRUE)
detach("package:ade4", unload=TRUE)
detach("package:ape", unload=TRUE)
library(roxygen2); library(testthat)
taxize <- "/Users/ScottMac/github/ropensci/taxize_"
roxygenise(taxize)
roxygenise(taxize)
run_examples(taxize, start="tpl_search", run=F)
run_examples(taxize, run=F)
check(taxize)
build_win(taxize)
build(taxize)
roxygenise(taxize)
check(taxize)
roxygenise(taxize)
check(taxize)
build_win(taxize)
run_examples(taxize, run=F)
setwd("`")
setwd("~")
install_github('taxize_', 'ropensci')
library(taxize)
help(package="taxize")
install_github('taxize_', 'ropensci')
library(taxize)
help(package="taxize")
release(taxize)
library(roxygen2); library(testthat)
taxize <- "/Users/ScottMac/github/ropensci/taxize_"
release(taxize)
?release
setwd("/Users/ScottMac/github/SChamberlain/work/jecol")
library(XML)
htmlParse("currentissue.html")
tt <- htmlParse("currentissue.html")
tt
xpathSApply(tt, "//li")
xpathSApply(tt, "//li", xmlValue)
xpathSApply(tt, "//li/a href", xmlValue)
xpathSApply(tt, "//li[a href]", xmlValue)
xpathSApply(tt, "//li:[a href]", xmlValue)
xpathSApply(tt, "//li")
xpathSApply(tt, "//li", simplify=T)
xpathSApply(tt, "//li", simplify="array")
xpathSApply(tt, "//li", simplify=T)
xpathSApply(tt, "//li")
xpathSApply(tt, "//a")
xpathSApply(tt, "//a href")
xpathSApply(tt, "//a:href")
xpathSApply(tt, "//a/href")
xpathSApply(tt, "//a[href]")
xpathSApply(tt, "//a:[href]")
xpathSApply(tt, "//a/href")
xpathSApply(tt, "//a//href")
xpathSApply(tt, "//a[:href]")
xpathSApply(tt, "//a:[href]")
xpathSApply(tt, "//a")
xpathSApply(tt, "//a", xmlValue)
ttt <- xpathSApply(tt, "//a:[href]")
ttt <- xpathSApply(tt, "//a")
ttt
as.character(ttt)
ttt[[1]]
ttt[[11]]
as.character(ttt[[11]])
xmlValue(ttt[[11]])
xmlAttrs(ttt[[11]])
xmlAttrs(ttt[[11]])["href"]
sapply( ttt, function(x) xmlAttrs(x)["href"] )
tttt <- sapply( ttt, function(x) xmlAttrs(x)["href"] )
grep("http://www.journalofecology.org/details/journalArticle/", tttt)
tttt[grep("http://www.journalofecology.org/details/journalArticle/", tttt)]
tttt
tttt[grep("http://www.journalofecology.org/details/journalArticle/", tttt)]
length(tttt[grep("http://www.journalofecology.org/details/journalArticle/", tttt)])
urls <- tttt[grep("http://www.journalofecology.org/details/journalArticle/", tttt)]
urls[[1]]
getURL(urls[[1]])
GET(urls[[1]])
library(httr)
GET(urls[[1]])
content(GET(urls[[1]]))
